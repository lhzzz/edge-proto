syntax = "proto3";
import public "common.proto";
import public "pod.proto";

package pb;
option go_package=".;pb";


message JoinRequest {
    string node_name = 1;
    string token = 2;
    string cloud_address = 3;
}

message JoinResponse {
    Common.Error error = 1;
    string vk_url = 2;//云端创建了ingress,返回的路由路径,通过这个建立websocket连接
}


message ResetRequest {
    string node_name = 1;
}

message ResetResponse {
    Common.Error error = 1;
}

message CreatePodRequest {
    k8s.io.api.core.v1.Pod pod = 1;
}

message CreatePodResponse {
    Common.Error error = 1;
}

message UpdatePodRequest {
    k8s.io.api.core.v1.Pod pod = 1;
}

message UpdatePodResponse {
    Common.Error error = 1;
}

message DeletePodRequest {
    k8s.io.api.core.v1.Pod pod = 1;
}

message DeletePodResponse {
    Common.Error error = 1;
}

message GetPodRequest {
    string namespace = 1;
    string name = 2; 
}

message GetPodResponse {
    k8s.io.api.core.v1.Pod pod = 2;
}

message GetPodsRequest {
    
}

message GetPodsResponse {
    Common.Error error = 1;
    repeated k8s.io.api.core.v1.Pod pods = 2;
}

message GetPodStatusRequest {
    string namespace = 1;
    string name = 2;
}

message GetPodStatusResponse {
    Common.Error error = 1;
    k8s.io.api.core.v1.PodStatus pod_status = 2;
}

message GetContainerLogsRequest {
    string namespace = 1;
    string name = 2;
    string container_name = 3;
}

message GetContainerLogsResponse {
    Common.Error error = 1;
    bytes log = 2;
}

message RunInContainerRequest {

}

message RunInContainerResponse {

}

message GetStatsSummaryRequest {

}

message GetStatsSummaryResponse {
    Common.Error error = 1;
    NodeStats node_status = 2;
    repeated k8s.io.api.core.v1.PodStatus pod_statuses = 3;
}

message Time {
    int64 seconds = 1;
    int32 nanos = 2;
}

message ProcessStats {
    uint64 process_count = 1;
}

message RuntimeStats {
    FsStats image_fs = 1;
}

message ContainerStats {
	string name = 1;
    Time time = 2;
    CPUStats cpu = 3;
    MemoryStats memory = 4;
    repeated AcceleratorStats accelerators = 5;
    FsStats rootfs = 6;
    FsStats logs = 7;
}

message RlimitStats {
    Time time = 1;
    int64 max_pid = 2;
    int64 num_of_running_process = 3;
}

message PodReference {
    string name = 1;
    string namespace = 2;
    string uid = 3;
}

message InterfaceStats {
    string name = 1;
    uint64 rx_bytes = 2;
    uint64 rx_errors = 3;
    uint64 tx_bytes = 4;
    uint64 tx_errors = 5;
}

message NetworkStats {
    Time time = 1;
    InterfaceStats interface_stats = 2;
    repeated InterfaceStats interfaces = 3;
}

message CPUStats {
    Time time = 1;
    uint64 usage_nano_cores = 2;
    uint64 usage_core_nano_seconds = 3;
}

message MemoryStats {
    Time time = 1;
    uint64 available_bytes = 2;
    uint64 usage_bytes = 3;
    uint64 working_set_bytes = 4;
    uint64 RSS_bytes = 5;
    uint64 page_faults = 6;
    uint64 major_page_faults = 7;
}

message AcceleratorStats {
    string make = 1;
    string model = 2;
    string id = 3;
    uint64 memory_total = 4;
    uint64 memory_used = 5;
    uint64 duty_cycle = 6;
}

message PVCReference {
    string name = 1;
    string namespace = 2;
}

message VolumeStats {
    FsStats fs_stats = 1;
    string name = 2;
    PVCReference PVC_ref = 3;
}

message FsStats {
    Time time = 1;
    uint64 available_bytes = 2;
    uint64 capacity_bytes = 3;
    uint64 used_bytes = 4;
    uint64 inodes_free = 5;
    uint64 inodes = 6;
    uint64 inodes_used = 7;
}

message NodeStats {
    string NodeName = 1;
    repeated ContainerStats system_containers = 2;
    Time start_time = 3;
    CPUStats cpu = 4;
    MemoryStats memory = 5;
    NetworkStats network = 6;
    FsStats fs = 7;
    RuntimeStats runtime = 8;
    RlimitStats rlimit = 9;
}

message PodStats {
    PodReference pod_ref = 1;
    Time start_time = 2;
    repeated ContainerStats containers = 3;
    CPUStats cpu = 4;
    MemoryStats memory = 5;
    NetworkStats network = 6;
    repeated VolumeStats volume_stats = 7;
    FsStats ephemeral_storage = 8;
    ProcessStats process_stats = 9;
}

service Edgelet {
    //FOR edgectl

    //edge join cloud-cluster
    rpc Join(JoinRequest) returns(JoinResponse);

    //edge leave from cloud-cluster
    rpc Reset(ResetRequest) returns(ResetResponse);

    //FOR cloud-cluster callback

    // CreatePod accepts a Pod definition
    rpc CreatePod(CreatePodRequest) returns(CreatePodResponse);

    // UpdatePod accepts a Pod definition and updates its reference.
    rpc UpdatePod(UpdatePodRequest) returns (UpdatePodResponse);

    // DeletePod deletes the specified pod
    rpc DeletePod(DeletePodRequest) returns (DeletePodResponse);

     // GetPods returns a list of all pods known to be "running".
    rpc GetPod(GetPodRequest) returns (GetPodResponse); 

    // GetPods returns a list of all pods known to be "running".
    rpc GetPods(GetPodsRequest) returns (GetPodsResponse); 

    // GetPodStatus returns the status of a pod by name that is "running".
    // returns nil if a pod by that name is not found
    rpc GetPodStatus(GetPodStatusRequest) returns(GetPodStatusResponse);

    // GetContainerLogs retrieves the logs of a container
    rpc GetContainerLogs(GetContainerLogsRequest) returns (stream GetContainerLogsResponse);

    // RunInContainer executes a command in a container in the pod, copying data
    // between in/out/err and the container's stdin/stdout/stderr.
    rpc RunInContainer(RunInContainerRequest) returns (RunInContainerResponse);

    //GetStatsSummary returns dummy stats for all pods known
    rpc GetStatsSummary(GetStatsSummaryRequest) returns (GetStatsSummaryResponse);
}
